package openapi

import (
	"bytes"
	"fmt"
	"os"
	"text/template"

	"github.com/stevenpaz/tf-schema-gen/internal"
)

const schemaTemplate = `// Code generated by github.com/stevenpaz/tf-schema-gen; DO NOT EDIT.
//
package {{.Scope.NameSnakeCase}}

import (
	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
	{{if .HasValidateFuncs -}}"github.com/hashicorp/terraform-plugin-sdk/v2/helper/validation"{{end}}
	{{if .HasValidateFuncs -}}"errors"{{end}}
)

const {{.NameCamelCase}}ResourceName = "edgio_{{.NameSnakeCase}}"

func Get{{.NameCamelCase}}Schema() map[string]*schema.Schema {
	return map[string]*schema.Schema{
		{{range $key, $value := .Properties -}}
		"{{$key}}": {
			Type: schema.{{$value.Type}},
			{{if $value.Description}}Description: "{{$value.Description}}",{{end}}
			{{if $value.Required}}Required: true,{{end}}
			{{if $value.Computed}}Computed: true,{{end}}
			{{if $value.Optional}}Optional: true,{{end}}
			{{if $value.ValidateFunc}}ValidateDiagFunc: {{$value.ValidateFunc}},{{end}}
		},
		{{end}}
	}
}
`

func CreateTFSchemaFromOpenAPI(path string, outputFolderPath string) error {
	// Parse OpenAPI 3.0 Document.
	scope, err := OpenAPI3ToTerraform(path)
	if err != nil {
		return fmt.Errorf("error converting to TF schema: %w", err)
	}

	// Load schema file template.
	tmpl, err := template.New("schema").Parse(schemaTemplate)
	if err != nil {
		return fmt.Errorf("error parsing template: %w", err)
	}

	// If output folder doesn't exist, create it.
	if _, err := os.Stat(outputFolderPath); os.IsNotExist(err) {
		err = os.Mkdir(outputFolderPath, 0o755)
		if err != nil {
			return fmt.Errorf("error creating output directory: %w", err)
		}
	}

	// Write each schema to its own file.
	for _, ts := range scope.Schemas {
		// Execute template with schema data.
		var buf bytes.Buffer
		if err := tmpl.Execute(&buf, ts); err != nil {
			return fmt.Errorf("error executing template: %w", err)
		}

		// Format the generated Go code.
		formattedBytes, err := internal.FormatGoCode(buf.Bytes())
		if err != nil {
			internal.WriteFileBytes(
				fmt.Sprintf("%s/%s_schema_err.go", outputFolderPath, ts.NameSnakeCase),
				buf.Bytes())
			return err
		}

		// Write generate code to file.
		err = internal.WriteFileBytes(
			fmt.Sprintf("%s/%s_schema.go", outputFolderPath, ts.NameSnakeCase),
			formattedBytes)
		if err != nil {
			return err
		}
	}

	return nil
}
